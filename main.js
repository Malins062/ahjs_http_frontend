(()=>{"use strict";var e,t,r,n,i,o,s,c={736:(e,t,r)=>{r(177),r(920),r(940);const n="Ошибка сети. Сервер не отдал код ошибки.";class i{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.url=e,this.formProcess=t,this.formError=r}getAsync(e,t,r){return new Promise((i=>{const o=`${this.url}?${t}`,s=new XMLHttpRequest;s.open(e,o),s.setRequestHeader("Content-type","application/x-www-form-urlencoded"),s.onload=()=>{i(s)},s.onerror=()=>{i(n)},s.send(r)}))}async sendRequest(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;this.formProcess.form&&this.formProcess.form.classList.remove(this.formProcess.hide);const n=await this.getAsync(e,t,r);return this.formProcess.form&&this.formProcess.form.classList.add(this.formProcess.hide),n}responseAnswer(e){let t=null;if(e===n||!e.status)return t=e,this.showError(t),t;if(!(e.status>=200&&e.status<300))return t=`Ошибка запроса к серверу ${this.urlServer} (код - ${e.status}): "${e.responseText}".`,this.showError(t),t;if(202===e.status)try{t=JSON.parse(e.responseText)}catch(r){return t=`${r} Статус: ${e.status}. Тело: ${e.responseText}.`,this.showError(t),t}return t}showError(e){if(console.error(e),this.formError){const t=this.formError.form.querySelector("p");this.formError.form.classList.remove(this.formError.hide),t.innerText=e,this.formError.form.addEventListener("submit",(e=>{e.preventDefault(),this.formError.form.classList.add(this.formError.hide)}))}}async getAllTickets(){const e=await this.sendRequest("GET","method=allTickets"),t=this.responseAnswer(e);return null!=t&&t.constructor===Array?t:[]}async getTicket(e){if(!e)return null;const t=await this.sendRequest("GET",`method=ticketById&id=${e}`),r=this.responseAnswer(t);return null!=r&&r.constructor===Array&&r.length>0?r[0]:[]}async addTicket(e){if(!e)return null;const t=await this.sendRequest("POST","method=createTicket",e);return this.responseAnswer(t)}async deleteTicket(e){if(!e)return null;const t=await this.sendRequest("DELETE",`method=deleteTicket&id=${e}`);return this.responseAnswer(t)}async setStatusTicket(e,t){if(!e)return null;const r=await this.sendRequest("PATCH",`method=changeStatusTicket&id=${e}`,t);return this.responseAnswer(r)}async changeTicket(e,t){if(!e||!t)return null;const r=await this.sendRequest("PATCH",`method=changeTicket&id=${e}`,t);return this.responseAnswer(r)}}const o="hidden",s="Добавить тикет",c="Изменить тикет",a="inputName",l="inputDescription";class d{constructor(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Список задач";this.parentEl=e,this.urlServer=t,this.tasksList={title:r,items:[]}}static itemHTML(e){return`\n        <li class="tasks__item list-group-item mb-2" draggable="true" data-id="${e.id}">\n          <div class="row d-flex">\n            <div class="col-md-1">\n              <div class="form-check">\n                <input class="item__status form-check-input" type="checkbox" value="" id="flexCheckChecked" ${e.status?"checked":""}>\n              </div>\n            </div>\n            <div class="col-md-7 d-flex justify-content-start">\n              <h6 class="item__name mb-0">${e.name}</h6>\n            </div>\n            <div class="col-md-3 d-flex justify-content-center">\n              <h6 class="item__name mb-0">${e.created}</h6>\n            </div>\n            <div class="col-md-1 d-flex justify-content-end">\n              <button class="item__edit btn btn-primary btn-sm" title="Редактировать задачу">&#9998;</button>\n              <button class="item__delete btn btn-danger btn-sm ms-1" data-bs-toggle="modal" \n                data-bs-target="#deleteTicketDialog" title="Удалить задачу">&#10005;</button>\n          </div>         \n          <div class="col-md-1"></div>\n          <div class="item__description col-md-7 hidden">\n            <p></p>\n          </div>\n        </li>`}static itemsHTML(e){let t="";return e&&e.forEach((e=>{t+=this.itemHTML(e)})),t}static tasksListHTML(e){return`\n      <div class="col-md-12 h-100 p-2">        \n        <div class="tasks__card card" data-id="${e.id}">\n          <div class="tasks__header card-header py-2">\n            <div class="row d-flex">\n              <div class="col-md-9 d-flex justify-content-start">\n                <h5 class="tasks__title mb-0 align-items-left">${e.title}</h5>\n              </div>\n              <div class="col-md-3 d-flex justify-content-end">\n                <button class="item__add btn btn-success btn-sm" \n                  title="Добавить новую задачу">\n                  &#10009; Добавить тикет\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div class="tasks__body card-body h-100 p-2" data-mdb-perfect-scrollbar="true">\n              <ul class="tasks__list list-group">\n                  ${d.itemsHTML(e.items)}\n              </ul>\n          </div>\n        </div>\n      </div>\n    `}static get loadingHTML(){return`\n      <div class="form-processing ${o}">\n      <div class="overlay" id="overlay"></div>\n      <div class="loadingProcess" id="loadingProcess"></div>\n      </div>\n    `}static get formErrorHTML(){return`\n      <div class="dialog-error ${o}">\n        <div class="overlay" id="overlay"></div>\n        <form class="form-ticket-delete row g-3">\n          <div class="col-12">\n            <div class="d-flex justify-content-center">\n              <h5 class="form-title">Ошибка</h5>\n            </div>\n            <p></p>\n          </div>\n          <div class="col-12 d-flex justify-content-end">\n            <button type="submit" value="submit" class="submit-buttom btn btn-primary ms-2">ОК</button>\n          </div>\n        </form>\n      </div>\n      `}static get formTicketDeleteHTML(){return`\n      <div class="dialog-delete ${o}">\n        <div class="overlay" id="overlay"></div>\n        <form class="form-ticket-delete row g-3">\n          <div class="col-12">\n            <div class="d-flex justify-content-center">\n              <h5 class="form-title">Удалить тикет</h5>\n            </div>\n            <p>Вы уверены, что хотите удалить тикет? Это действие не обратимо.</p>\n          </div>\n          <div class="col-12 d-flex justify-content-end">\n            <button type="button" value="cancel" class="cancel-button btn btn-secondary">Отмена</button>\n            <button type="submit" value="submit" class="submit-buttom btn btn-primary ms-2">ОК</button>\n          </div>\n        </form>\n      </div>\n      `}static get formTicketHTML(){return`\n    <div class="dialog-add-edit ${o}">\n      <div class="overlay" id="overlay"></div>\n      <form class="form-ticket row g-3">\n        <div class="col-12 d-flex justify-content-center">\n          <h5 class="form-title">Изменить тикет</h5>\n        </div>\n        <div class="col-12">\n          <label for="inputName" class="form-label">Краткое описание</label>\n          <input type="text" class="form-control" required data-id="${a}">\n        </div>\n        <div class="col-12">\n          <label for="inputDescription" class="form-label">Подробное описание</label>\n          <textarea class="form-control" required data-id="${l}" type="text" rows="3"></textarea>\n        </div>\n        <div class="col-12 d-flex justify-content-end">\n          <button type="button" value="cancel" class="cancel-button btn btn-secondary">Отмена</button>\n          <button type="submit" value="submit" class="submit-buttom btn btn-primary ms-2">ОК</button>\n        </div>\n      </form>\n    </div>\n    `}static idSelector(e){return`[data-id="${e}"]`}static get itemAddSelector(){return".item__add"}static get itemSelector(){return".tasks__item"}static get listItemsSelector(){return".tasks__list"}static get delItemSelector(){return".item__delete"}static get editItemSelector(){return".item__edit"}static get loadingSelector(){return".form-processing"}static get descriptionItemSelector(){return".item__description"}static get nameItemSelector(){return".item__name"}static get statusItemSelector(){return".item__status"}static get formTicketSelector(){return".form-ticket"}static get formTicketDeleteSelector(){return".form-ticket-delete"}static get formTitleSelector(){return".form-title"}static get dialogLoadingSelector(){return".dialog-loading"}static get dialogErrorSelector(){return".dialog-error"}static get dialogDeleteSelector(){return".dialog-delete"}static get dialogAddEditSelector(){return".dialog-add-edit"}static get cancelButtonSelector(){return".cancel-button"}static get submitButtonSelector(){return".submit-button"}async bindToDOM(){if(this.parentEl.innerHTML="",!this.urlServer)return;this.parentEl.innerHTML+=d.loadingHTML,this.parentEl.innerHTML+=d.formErrorHTML,this.parentEl.innerHTML+=d.formTicketHTML,this.parentEl.innerHTML+=d.formTicketDeleteHTML;const e=this.parentEl.querySelector(d.loadingSelector),t=this.parentEl.querySelector(d.dialogErrorSelector);this.XHR=new i(this.urlServer,{form:e,hide:o},{form:t,hide:o}),this.tasksList.items=await this.XHR.getAllTickets(),this.parentEl.innerHTML+=d.tasksListHTML(this.tasksList),this.tasksListItems=this.parentEl.querySelector(d.listItemsSelector),this.initEvents()}initEvents(){const e=this.parentEl.querySelector(d.itemAddSelector);this.onClickNewItem=this.onClickNewItem.bind(this),e.addEventListener("click",this.onClickNewItem),this.initItemsEvents()}initItemsEvents(){this.tasksListItems.querySelectorAll(d.itemSelector).forEach((e=>this.initItemEvents(e)))}initItemEvents(e){const t=e.dataset.id;e.addEventListener("click",(async()=>{const r=e.querySelector(d.descriptionItemSelector);if(r){if(r.classList.contains(o)){const e=r.querySelector("p"),n=await this.XHR.getTicket(t);e.innerText=n?n.description:""}r.classList.toggle(o)}}));const r=e.querySelector(d.statusItemSelector);r.addEventListener("click",(async e=>{e.stopPropagation();const n=`status=${r.checked}`;await this.XHR.setStatusTicket(t,n)})),e.querySelector(d.delItemSelector).addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.onClickDeleteItem(t)})),e.querySelector(d.editItemSelector).addEventListener("click",(async e=>{e.stopPropagation(),e.preventDefault();const r=await this.XHR.getTicket(t);this.onClickEditItem(r)}))}async onClickNewItem(){const e=this.parentEl.querySelector(d.dialogAddEditSelector);e.classList.remove(o),e.querySelector(d.formTitleSelector).innerText=s;const t=e.querySelector(d.idSelector(a));t.value="";const r=e.querySelector(d.idSelector(l));r.value="",e.querySelector(d.cancelButtonSelector).addEventListener("click",(()=>e.classList.add(o))),e.addEventListener("submit",(async n=>{n.preventDefault();const i=`name=${encodeURIComponent(t.value)}&description=${encodeURIComponent(r.value)}`,s=await this.XHR.addTicket(i);e.classList.add(o),null!=s&&s.constructor===Object&&this.addItemHTML(s)}))}async onClickEditItem(e){const t=this.parentEl.querySelector(d.dialogAddEditSelector);t.classList.remove(o),t.querySelector(d.formTitleSelector).innerText=c;const r=t.querySelector(d.idSelector(a));r.value=e?e.name:"";const n=t.querySelector(d.idSelector(l));n.value=e?e.description:"",t.querySelector(d.cancelButtonSelector).addEventListener("click",(()=>t.classList.add(o))),t.addEventListener("submit",(async i=>{i.preventDefault();const s=`name=${r.value}&description=${n.value}`,c=await this.XHR.changeTicket(e.id,s);t.classList.add(o),null!=c&&c.constructor===Object&&this.changeItemHTML(c)}))}async onClickDeleteItem(e){const t=this.parentEl.querySelector(d.dialogDeleteSelector);t.classList.remove(o),t.querySelector(d.cancelButtonSelector).addEventListener("click",(()=>t.classList.add(o))),t.addEventListener("submit",(async r=>{r.preventDefault();const n=await this.XHR.deleteTicket(e);t.classList.add(o),null!=n&&n.constructor===Object&&this.deleteItemHTML(n.id)}))}addItemHTML(e){const t=d.itemHTML(e);this.tasksListItems.insertAdjacentHTML("beforeEnd",t);const r=this.tasksListItems.querySelector(d.idSelector(e.id));this.initItemEvents(r)}deleteItemHTML(e){this.tasksListItems.querySelector(d.idSelector(e)).remove()}changeItemHTML(e){this.tasksListItems.querySelector(d.idSelector(e.id)).querySelector(d.nameItemSelector).innerText=e.name}}new d(document.querySelector("#widget-container"),"http://localhost:7070").bindToDOM()},783:(e,t,r)=>{var n=r(618),i=Object.create(null),o="undefined"==typeof document,s=Array.prototype.forEach;function c(){}function a(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function l(){var e=document.querySelectorAll("link");s.call(e,(function(e){!0!==e.visited&&a(e)}))}function d(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(o)return console.log("no window.document found, will not HMR CSS"),c;var r,u,f=function(e){var t=i[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),o=r[r.length-1];o&&(t=o.src)}i[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),i=r&&r[1];return i&&e?e.split(",").map((function(e){var r=new RegExp("".concat(i,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,i),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=f(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return s.call(t,(function(t){if(t.href){var i=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);d(i)&&!0!==t.visited&&i&&(a(t,i),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void l();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),l())},50,u=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},920:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},940:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},a={};function l(e){var t=a[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=a[e]={id:e,exports:{}};try{var n={id:e,module:r,factory:c[e],require:l};l.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.exports}l.m=c,l.c=a,l.i=[],l.hu=e=>e+"."+l.h()+".hot-update.js",l.miniCssF=e=>"main.css",l.hmrF=()=>"main."+l.h()+".hot-update.json",l.h=()=>"1428912d43f669ab7bf5",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs_http_frontend:",l.l=(r,n,i,o)=>{if(e[r])e[r].push(n);else{var s,c;if(void 0!==i)for(var a=document.getElementsByTagName("script"),d=0;d<a.length;d++){var u=a[d];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+i){s=u;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,l.nc&&s.setAttribute("nonce",l.nc),s.setAttribute("data-webpack",t+i),s.src=r),e[r]=[n];var f=(t,n)=>{s.onerror=s.onload=null,clearTimeout(p);var i=e[r];if(delete e[r],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(n))),t)return t(n)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=f.bind(null,s.onerror),s.onload=f.bind(null,s.onload),c&&document.head.appendChild(s)}},(()=>{var e,t,r,n={},i=l.c,o=[],s=[],c="idle",a=0,d=[];function u(e){c=e;for(var t=[],r=0;r<s.length;r++)t[r]=s[r].call(null,e);return Promise.all(t)}function f(){0==--a&&u("ready").then((function(){if(0===a){var e=d;d=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return u("check").then(l.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(l.hmrC).reduce((function(e,i){return l.hmrC[i](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return n}))},0===a?t():new Promise((function(e){d.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+c+")")})):m(e)}function m(e){e=e||{},v();var n=t.map((function(t){return t(e)}));t=void 0;var i=n.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return u("abort").then((function(){throw i[0]}));var o=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var s,c=u("apply"),a=function(e){s||(s=e)},l=[];return n.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var r=0;r<t.length;r++)l.push(t[r])}})),Promise.all([o,c]).then((function(){return s?u("fail").then((function(){throw s})):r?m(e).then((function(e){return l.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return l}))}))}function v(){if(r)return t||(t=[]),Object.keys(l.hmrI).forEach((function(e){r.forEach((function(r){l.hmrI[e](r,t)}))})),r=void 0,!0}l.hmrD=n,l.i.push((function(d){var m,v,y,g,b=d.module,E=function(t,r){var n=i[r];if(!n)return t;var s=function(s){if(n.hot.active){if(i[s]){var c=i[s].parents;-1===c.indexOf(r)&&c.push(r)}else o=[r],e=s;-1===n.children.indexOf(s)&&n.children.push(s)}else console.warn("[HMR] unexpected require("+s+") from disposed module "+r),o=[];return t(s)},l=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&"e"!==d&&Object.defineProperty(s,d,l(d));return s.e=function(e){return function(e){switch(c){case"ready":u("prepare");case"prepare":return a++,e.then(f,f),e;default:return e}}(t.e(e))},s}(d.require,d.id);b.hot=(m=d.id,v=b,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){o=v.parents.slice(),e=y?void 0:m,l(m)},active:!0,accept:function(e,t,r){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._acceptedDependencies[e[n]]=t||function(){},g._acceptedErrorHandlers[e[n]]=r;else g._acceptedDependencies[e]=t||function(){},g._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._declinedDependencies[e[t]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=g._disposeHandlers.indexOf(e);t>=0&&g._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":t=[],Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return c;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:n[m]},e=void 0,g),b.parents=o,b.children=[],o=[],d.require=E})),l.hmrC={},l.hmrI={}})(),(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e})(),r=(e,t,r,n)=>{var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=o=>{if(i.onerror=i.onload=null,"load"===o.type)r();else{var s=o&&("load"===o.type?"missing":o.type),c=o&&o.target&&o.target.href||t,a=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");a.code="CSS_CHUNK_LOAD_FAILED",a.type=s,a.request=c,i.parentNode.removeChild(i),n(a)}},i.href=t,document.head.appendChild(i),i},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var i=(s=r[n]).getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(i===e||i===t))return s}var o=document.getElementsByTagName("style");for(n=0;n<o.length;n++){var s;if((i=(s=o[n]).getAttribute("data-href"))===e||i===t)return s}},i=[],o=[],s=e=>({dispose:()=>{for(var e=0;e<i.length;e++){var t=i[e];t.parentNode&&t.parentNode.removeChild(t)}i.length=0},apply:()=>{for(var e=0;e<o.length;e++)o[e].rel="stylesheet";o.length=0}}),l.hmrC.miniCss=(e,t,c,a,d,u)=>{d.push(s),e.forEach((e=>{var t=l.miniCssF(e),s=l.p+t,c=n(t,s);c&&a.push(new Promise(((t,n)=>{var a=r(e,s,(()=>{a.as="style",a.rel="preload",t()}),n);i.push(c),o.push(a)})))}))},(()=>{var e,t,r,n,i,o=l.hmrS_jsonp=l.hmrS_jsonp||{179:0},s={};function c(t,r){return e=r,new Promise(((e,r)=>{s[t]=e;var n=l.p+l.hu(t),i=new Error;l.l(n,(e=>{if(s[t]){s[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+n+": "+o+")",i.name="ChunkLoadError",i.type=n,i.request=o,r(i)}}))}))}function a(e){function s(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),o=i.id,s=i.chain,a=l.c[o];if(a&&(!a.hot._selfAccepted||a.hot._selfInvalidated)){if(a.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(a.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var d=0;d<a.parents.length;d++){var u=a.parents[d],f=l.c[u];if(f){if(f.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(f.hot._acceptedDependencies[o]?(r[u]||(r[u]=[]),c(r[u],[o])):(delete r[u],t.push(u),n.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}l.f&&delete l.f.jsonpHmr,t=void 0;var a={},d=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(l.o(r,p)){var h,m=r[p],v=!1,y=!1,g=!1,b="";switch((h=m?s(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in u[p]=m,c(d,h.outdatedModules),h.outdatedDependencies)l.o(h.outdatedDependencies,p)&&(a[p]||(a[p]=[]),c(a[p],h.outdatedDependencies[p]));g&&(c(d,[h.moduleId]),u[p]=f)}r=void 0;for(var E,k=[],S=0;S<d.length;S++){var w=d[S],_=l.c[w];_&&(_.hot._selfAccepted||_.hot._main)&&u[w]!==f&&!_.hot._selfInvalidated&&k.push({module:w,require:_.hot._requireSelf,errorHandler:_.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var t,r=d.slice();r.length>0;){var i=r.pop(),s=l.c[i];if(s){var c={},u=s.hot._disposeHandlers;for(S=0;S<u.length;S++)u[S].call(null,c);for(l.hmrD[i]=c,s.hot.active=!1,delete l.c[i],delete a[i],S=0;S<s.children.length;S++){var f=l.c[s.children[S]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in a)if(l.o(a,p)&&(s=l.c[p]))for(E=a[p],S=0;S<E.length;S++)t=E[S],(e=s.children.indexOf(t))>=0&&s.children.splice(e,1)},apply:function(t){for(var r in u)l.o(u,r)&&(l.m[r]=u[r]);for(var n=0;n<i.length;n++)i[n](l);for(var o in a)if(l.o(a,o)){var s=l.c[o];if(s){E=a[o];for(var c=[],f=[],p=[],h=0;h<E.length;h++){var m=E[h],v=s.hot._acceptedDependencies[m],y=s.hot._acceptedErrorHandlers[m];if(v){if(-1!==c.indexOf(v))continue;c.push(v),f.push(y),p.push(m)}}for(var g=0;g<c.length;g++)try{c[g].call(null,E)}catch(r){if("function"==typeof f[g])try{f[g](r,{moduleId:o,dependencyId:p[g]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[g],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[g],error:r}),e.ignoreErrored||t(r)}}}for(var b=0;b<k.length;b++){var S=k[b],w=S.module;try{S.require(w)}catch(r){if("function"==typeof S.errorHandler)try{S.errorHandler(r,{moduleId:w,module:l.c[w]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:w,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:w,error:r}),e.ignoreErrored||t(r)}}return d}}}self.webpackHotUpdateajs_http_frontend=(t,n,o)=>{for(var c in n)l.o(n,c)&&(r[c]=n[c],e&&e.push(c));o&&i.push(o),s[t]&&(s[t](),s[t]=void 0)},l.hmrI.jsonp=function(e,t){r||(r={},i=[],n=[],t.push(a)),l.o(r,e)||(r[e]=l.m[e])},l.hmrC.jsonp=function(e,s,d,u,f,p){f.push(a),t={},n=s,r=d.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){l.o(o,e)&&void 0!==o[e]?(u.push(c(e,p)),t[e]=!0):t[e]=!1})),l.f&&(l.f.jsonpHmr=function(e,r){t&&l.o(t,e)&&!t[e]&&(r.push(c(e)),t[e]=!0)})},l.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(l.p+l.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),l(736)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NEosRUFBZ0IzSSxFQUFTaUksSUFDdkNHLEVBQW9CcEksSUFBVyxHQUUvQm9JLEVBQW9CcEksSUFBVyxDQUVqQyxJQUNJWCxFQUFvQm1LLElBQ3ZCbkssRUFBb0JtSyxFQUFFQyxTQUFXLFNBQVV6SixFQUFTdUQsR0FFbEQ2RSxHQUNBL0ksRUFBb0JtQixFQUFFNEgsRUFBcUJwSSxLQUMxQ29JLEVBQW9CcEksS0FFckJ1RCxFQUFTeEUsS0FBSzRKLEVBQWdCM0ksSUFDOUJvSSxFQUFvQnBJLElBQVcsRUFFakMsRUFFRixFQUVBWCxFQUFvQjZELEtBQU8sS0FDMUIsR0FBcUIsb0JBQVZ5SSxNQUF1QixNQUFNLElBQUkxSSxNQUFNLHNDQUNsRCxPQUFPMEksTUFBTXRNLEVBQW9CNUssRUFBSTRLLEVBQW9CYyxRQUFRMEMsTUFBTStJLElBQ3RFLEdBQXVCLE1BQXBCQSxFQUFTNVgsT0FBWixDQUNBLElBQUk0WCxFQUFTQyxHQUFJLE1BQU0sSUFBSTVJLE1BQU0sbUNBQXFDMkksRUFBU0UsWUFDL0UsT0FBT0YsRUFBU0csTUFGa0IsQ0FFWixHQUNyQixDLEtDdGZ1QjFNLEVBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hanNfaHR0cF9mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nIiwid2VicGFjazovL2Fqc19odHRwX2Zyb250ZW5kLy4vc3JjL3dpZGdldHMvaGVscGRlc2svcmVxdWVzdHNlbmRlci5qcyIsIndlYnBhY2s6Ly9hanNfaHR0cF9mcm9udGVuZC8uL3NyYy93aWRnZXRzL2hlbHBkZXNrL2hlbHBkZXNrLmpzIiwid2VicGFjazovL2Fqc19odHRwX2Zyb250ZW5kLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9hanNfaHR0cF9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9hanNfaHR0cF9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ub3JtYWxpemUtdXJsLmpzIiwid2VicGFjazovL2Fqc19odHRwX2Zyb250ZW5kLy4vc3JjL2Nzcy9ib290c3RyYXAuY3NzP2I5OTUiLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvLi9zcmMvY3NzL3N0eWxlLmNzcz82YjdiIiwid2VicGFjazovL2Fqc19odHRwX2Zyb250ZW5kLy4vc3JjL3dpZGdldHMvaGVscGRlc2svaGVscGRlc2suY3NzPzRhY2QiLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IHVwZGF0ZSBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9hanNfaHR0cF9mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Fqc19odHRwX2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL2Fqc19odHRwX2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCIsIndlYnBhY2s6Ly9hanNfaHR0cF9mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Fqc19odHRwX2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2hvdCBtb2R1bGUgcmVwbGFjZW1lbnQiLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWpzX2h0dHBfZnJvbnRlbmQvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcImFqc19odHRwX2Zyb250ZW5kOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJ2YXIgY3JlYXRlU3R5bGVzaGVldCA9IChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gKG9wdGlvbnMpID0+IHtcblx0cmV0dXJuIHsgZGlzcG9zZTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgb2xkVGFnID0gb2xkVGFnc1tpXTtcblx0XHRcdGlmKG9sZFRhZy5wYXJlbnROb2RlKSBvbGRUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRUYWcpO1xuXHRcdH1cblx0XHRvbGRUYWdzLmxlbmd0aCA9IDA7XG5cdH0sIGFwcGx5OiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IChjaHVua0lkcywgcmVtb3ZlZENodW5rcywgcmVtb3ZlZE1vZHVsZXMsIHByb21pc2VzLCBhcHBseUhhbmRsZXJzLCB1cGRhdGVkTW9kdWxlc0xpc3QpID0+IHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGNodW5rSWRzLmZvckVhY2goKGNodW5rSWQpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHR2YXIgb2xkVGFnID0gZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpO1xuXHRcdGlmKCFvbGRUYWcpIHJldHVybjtcblx0XHRwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciB0YWcgPSBjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCAoKSA9PiB7XG5cdFx0XHRcdHRhZy5hcyA9IFwic3R5bGVcIjtcblx0XHRcdFx0dGFnLnJlbCA9IFwicHJlbG9hZFwiO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9LCByZWplY3QpO1xuXHRcdFx0b2xkVGFncy5wdXNoKG9sZFRhZyk7XG5cdFx0XHRuZXdUYWdzLnB1c2godGFnKTtcblx0XHR9KSk7XG5cdH0pO1xufSIsImNvbnN0IFNFUlZFUl9FUlJPUiA9ICfQntGI0LjQsdC60LAg0YHQtdGC0LguINCh0LXRgNCy0LXRgCDQvdC1INC+0YLQtNCw0Lsg0LrQvtC0INC+0YjQuNCx0LrQuC4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0U2VuZGVyIHtcbiAgY29uc3RydWN0b3IodXJsU2VydmVyLCBmb3JtUHJvY2VzcyA9IG51bGwsIGZvcm1FcnJvciA9IG51bGwpIHtcbiAgICB0aGlzLnVybCA9IHVybFNlcnZlcjtcbiAgICB0aGlzLmZvcm1Qcm9jZXNzID0gZm9ybVByb2Nlc3M7XG4gICAgdGhpcy5mb3JtRXJyb3IgPSBmb3JtRXJyb3I7XG4gIH1cblxuICBnZXRBc3luYyhtZXRob2QsIHF1ZXJ5LCBib2R5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0VGV4dCA9IGAke3RoaXMudXJsfT8ke3F1ZXJ5fWA7XG4gICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgcmVxdWVzdFRleHQpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcblxuICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh4aHIpO1xuICAgICAgICAvLyBpZiAodGhpcy54aHIuc3RhdHVzID09PSAyMDIpIHtcbiAgICAgICAgLy8gICByZXNvbHZlKHRoaXMueGhyLnJlc3BvbnNlKTtcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICByZWplY3QobmV3IEVycm9yKGAke3RoaXMueGhyLnN0YXR1c306ICR7dGhpcy54aHIuc3RhdHVzVGV4dH1gKSk7XG4gICAgICAgIC8vIH1cbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZXNvbHZlKFNFUlZFUl9FUlJPUik7XG4gICAgICB9O1xuXG4gICAgICB4aHIuc2VuZChib2R5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRSZXF1ZXN0KG1ldGhvZCwgcXVlcnksIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICBpZiAodGhpcy5mb3JtUHJvY2Vzcy5mb3JtKSB7XG4gICAgICB0aGlzLmZvcm1Qcm9jZXNzLmZvcm0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmZvcm1Qcm9jZXNzLmhpZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0QXN5bmMobWV0aG9kLCBxdWVyeSwgYm9keSk7XG5cbiAgICBpZiAodGhpcy5mb3JtUHJvY2Vzcy5mb3JtKSB7XG4gICAgICB0aGlzLmZvcm1Qcm9jZXNzLmZvcm0uY2xhc3NMaXN0LmFkZCh0aGlzLmZvcm1Qcm9jZXNzLmhpZGUpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXNwb25zZUFuc3dlcihhKSB7XG4gICAgbGV0IHJBbnN3ZXIgPSBudWxsO1xuICAgIC8vIGNvbnNvbGUubG9nKCdyZXNwb25zZUFuc3dlcicsIGEuc3RhdHVzKTtcbiAgICBpZiAoYSA9PT0gU0VSVkVSX0VSUk9SIHx8ICFhLnN0YXR1cykge1xuICAgICAgckFuc3dlciA9IGE7XG4gICAgICB0aGlzLnNob3dFcnJvcihyQW5zd2VyKTtcbiAgICAgIHJldHVybiByQW5zd2VyO1xuICAgIH1cblxuICAgIGlmICghKGEuc3RhdHVzID49IDIwMCAmJiBhLnN0YXR1cyA8IDMwMCkpIHtcbiAgICAgIHJBbnN3ZXIgPSBg0J7RiNC40LHQutCwINC30LDQv9GA0L7RgdCwINC6INGB0LXRgNCy0LXRgNGDICR7dGhpcy51cmxTZXJ2ZXJ9ICjQutC+0LQgLSAke2Euc3RhdHVzfSk6IFwiJHthLnJlc3BvbnNlVGV4dH1cIi5gO1xuICAgICAgdGhpcy5zaG93RXJyb3IockFuc3dlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgcmV0dXJuIHJBbnN3ZXI7XG4gICAgfVxuXG4gICAgaWYgKGEuc3RhdHVzID09PSAyMDIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZXNwb25zZVRleHQnLCBhLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIHJBbnN3ZXIgPSBKU09OLnBhcnNlKGEucmVzcG9uc2VUZXh0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgckFuc3dlciA9IGAke2V9INCh0YLQsNGC0YPRgTogJHthLnN0YXR1c30uINCi0LXQu9C+OiAke2EucmVzcG9uc2VUZXh0fS5gO1xuICAgICAgICB0aGlzLnNob3dFcnJvcihyQW5zd2VyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIHJldHVybiByQW5zd2VyO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKCdyQW5zd2VyJywgckFuc3dlcik7XG4gICAgcmV0dXJuIHJBbnN3ZXI7XG4gIH1cblxuICBzaG93RXJyb3IobXNnKSB7XG4gICAgY29uc29sZS5lcnJvcihtc2cpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblxuICAgIGlmICh0aGlzLmZvcm1FcnJvcikge1xuICAgICAgY29uc3QgcCA9IHRoaXMuZm9ybUVycm9yLmZvcm0ucXVlcnlTZWxlY3RvcigncCcpO1xuXG4gICAgICB0aGlzLmZvcm1FcnJvci5mb3JtLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5mb3JtRXJyb3IuaGlkZSk7XG4gICAgICBwLmlubmVyVGV4dCA9IG1zZztcblxuICAgICAgdGhpcy5mb3JtRXJyb3IuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmZvcm1FcnJvci5mb3JtLmNsYXNzTGlzdC5hZGQodGhpcy5mb3JtRXJyb3IuaGlkZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRBbGxUaWNrZXRzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICdtZXRob2Q9YWxsVGlja2V0cycpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzcG9uc2VBbnN3ZXIocmVzcG9uc2VUZXh0KTtcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0QWxsVGlja2V0cyByZXN1bHQnLCByZXN1bHQpXG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdCAhPT0gbnVsbCAmJiByZXN1bHQuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBhc3luYyBnZXRUaWNrZXQoaWQpIHtcbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCBgbWV0aG9kPXRpY2tldEJ5SWQmaWQ9JHtpZH1gKTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlc3BvbnNlQW5zd2VyKHJlc3BvbnNlVGV4dCk7XG5cbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9PSBudWxsXG4gICAgICAmJiByZXN1bHQuY29uc3RydWN0b3IgPT09IEFycmF5ICYmIHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGFzeW5jIGFkZFRpY2tldChib2R5KSB7XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZygnYWRkVGlja2V0IGJvZHk9JywgYm9keSk7XG4gICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICdtZXRob2Q9Y3JlYXRlVGlja2V0JywgYm9keSk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZXNwb25zZUFuc3dlcihyZXNwb25zZVRleHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyBkZWxldGVUaWNrZXQoaWQpIHtcbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZygnZGVsZXRlVGlja2V0IGlkPScsIGlkKTtcbiAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KCdERUxFVEUnLCBgbWV0aG9kPWRlbGV0ZVRpY2tldCZpZD0ke2lkfWApO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzcG9uc2VBbnN3ZXIocmVzcG9uc2VUZXh0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgYXN5bmMgc2V0U3RhdHVzVGlja2V0KGlkLCBib2R5KSB7XG4gICAgaWYgKCFpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coJ2NoYW5nZVN0YXR1c1RpY2tldCBpZD0nLCBpZCk7XG4gICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgdGhpcy5zZW5kUmVxdWVzdCgnUEFUQ0gnLCBgbWV0aG9kPWNoYW5nZVN0YXR1c1RpY2tldCZpZD0ke2lkfWAsIGJvZHkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzcG9uc2VBbnN3ZXIocmVzcG9uc2VUZXh0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgYXN5bmMgY2hhbmdlVGlja2V0KGlkLCBib2R5KSB7XG4gICAgaWYgKCFpZCB8fCAhYm9keSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coJ2NoYW5nZVRpY2tldCBpZD0nLCBpZCk7XG4gICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgdGhpcy5zZW5kUmVxdWVzdCgnUEFUQ0gnLCBgbWV0aG9kPWNoYW5nZVRpY2tldCZpZD0ke2lkfWAsIGJvZHkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzcG9uc2VBbnN3ZXIocmVzcG9uc2VUZXh0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iLCJpbXBvcnQgJy4vaGVscGRlc2suY3NzJztcbmltcG9ydCBSZXF1ZXN0U2VuZGVyIGZyb20gJy4vcmVxdWVzdHNlbmRlcic7XG5cbi8vINCd0LDQuNC80LXQvdC+0LLQsNC90LjQtSDRgdGC0LjQu9GPINC00LvRjyDRgdC60YDRi9GC0LjRjyDQvtCx0YrQtdC60YLQsFxuY29uc3QgU1RZTEVfSElEREVOID0gJ2hpZGRlbic7XG5cbi8vINCX0LDQs9C+0LvQvtCy0L7QuiDQv9C+INGD0LzQvtC70YfQsNC90LjRjlxuY29uc3QgREVGQVVMVF9USVRMRSA9ICfQodC/0LjRgdC+0Log0LfQsNC00LDRhyc7XG5cbi8vINCd0LDRgdGC0YDQvtC50LrQuCDRhNC+0YDQvCDQtNC40LDQu9C+0LPQsFxuY29uc3QgRk9STVMgPSB7XG4gIHRpdGxlczoge1xuICAgIGFkZDogJ9CU0L7QsdCw0LLQuNGC0Ywg0YLQuNC60LXRgicsXG4gICAgY2hhbmdlOiAn0JjQt9C80LXQvdC40YLRjCDRgtC40LrQtdGCJyxcbiAgfSxcbiAgaWRJbnB1dE5hbWU6ICdpbnB1dE5hbWUnLFxuICBpZElucHV0RGVzY3JpcHRpb246ICdpbnB1dERlc2NyaXB0aW9uJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlbHBEZXNrV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IocGFyZW50RWwsIHVybFNlcnZlciwgdGl0bGUgPSBERUZBVUxUX1RJVExFKSB7XG4gICAgdGhpcy5wYXJlbnRFbCA9IHBhcmVudEVsO1xuXG4gICAgdGhpcy51cmxTZXJ2ZXIgPSB1cmxTZXJ2ZXI7XG5cbiAgICB0aGlzLnRhc2tzTGlzdCA9IHtcbiAgICAgIHRpdGxlLFxuICAgICAgaXRlbXM6IFtdLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgaXRlbUhUTUwoaXRlbSkge1xuICAgIGNvbnN0IGh0bWwgPSBgXG4gICAgICAgIDxsaSBjbGFzcz1cInRhc2tzX19pdGVtIGxpc3QtZ3JvdXAtaXRlbSBtYi0yXCIgZHJhZ2dhYmxlPVwidHJ1ZVwiIGRhdGEtaWQ9XCIke2l0ZW0uaWR9XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBkLWZsZXhcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cIml0ZW1fX3N0YXR1cyBmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJcIiBpZD1cImZsZXhDaGVja0NoZWNrZWRcIiAke2l0ZW0uc3RhdHVzID8gJ2NoZWNrZWQnIDogJyd9PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC03IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnRcIj5cbiAgICAgICAgICAgICAgPGg2IGNsYXNzPVwiaXRlbV9fbmFtZSBtYi0wXCI+JHtpdGVtLm5hbWV9PC9oNj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxoNiBjbGFzcz1cIml0ZW1fX25hbWUgbWItMFwiPiR7aXRlbS5jcmVhdGVkfTwvaDY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMSBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZFwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaXRlbV9fZWRpdCBidG4gYnRuLXByaW1hcnkgYnRuLXNtXCIgdGl0bGU9XCLQoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjCDQt9Cw0LTQsNGH0YNcIj4mIzk5OTg7PC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJpdGVtX19kZWxldGUgYnRuIGJ0bi1kYW5nZXIgYnRuLXNtIG1zLTFcIiBkYXRhLWJzLXRvZ2dsZT1cIm1vZGFsXCIgXG4gICAgICAgICAgICAgICAgZGF0YS1icy10YXJnZXQ9XCIjZGVsZXRlVGlja2V0RGlhbG9nXCIgdGl0bGU9XCLQo9C00LDQu9C40YLRjCDQt9Cw0LTQsNGH0YNcIj4mIzEwMDA1OzwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PiAgICAgICAgIFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMVwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtX19kZXNjcmlwdGlvbiBjb2wtbWQtNyBoaWRkZW5cIj5cbiAgICAgICAgICAgIDxwPjwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9saT5gO1xuICAgIHJldHVybiBodG1sO1xuICB9XG5cbiAgc3RhdGljIGl0ZW1zSFRNTChpdGVtcykge1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgaWYgKGl0ZW1zKSB7XG4gICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGh0bWwgKz0gdGhpcy5pdGVtSFRNTChpdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbDtcbiAgfVxuXG4gIHN0YXRpYyB0YXNrc0xpc3RIVE1MKHRhc2tzTGlzdCkge1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGgtMTAwIHAtMlwiPiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrc19fY2FyZCBjYXJkXCIgZGF0YS1pZD1cIiR7dGFza3NMaXN0LmlkfVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrc19faGVhZGVyIGNhcmQtaGVhZGVyIHB5LTJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZC1mbGV4XCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtOSBkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgPGg1IGNsYXNzPVwidGFza3NfX3RpdGxlIG1iLTAgYWxpZ24taXRlbXMtbGVmdFwiPiR7dGFza3NMaXN0LnRpdGxlfTwvaDU+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTMgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmRcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaXRlbV9fYWRkIGJ0biBidG4tc3VjY2VzcyBidG4tc21cIiBcbiAgICAgICAgICAgICAgICAgIHRpdGxlPVwi0JTQvtCx0LDQstC40YLRjCDQvdC+0LLRg9GOINC30LDQtNCw0YfRg1wiPlxuICAgICAgICAgICAgICAgICAgJiMxMDAwOTsg0JTQvtCx0LDQstC40YLRjCDRgtC40LrQtdGCXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFza3NfX2JvZHkgY2FyZC1ib2R5IGgtMTAwIHAtMlwiIGRhdGEtbWRiLXBlcmZlY3Qtc2Nyb2xsYmFyPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJ0YXNrc19fbGlzdCBsaXN0LWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAke0hlbHBEZXNrV2lkZ2V0Lml0ZW1zSFRNTCh0YXNrc0xpc3QuaXRlbXMpfVxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGxvYWRpbmdIVE1MKCkge1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1wcm9jZXNzaW5nICR7U1RZTEVfSElEREVOfVwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXlcIiBpZD1cIm92ZXJsYXlcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJsb2FkaW5nUHJvY2Vzc1wiIGlkPVwibG9hZGluZ1Byb2Nlc3NcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGZvcm1FcnJvckhUTUwoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJkaWFsb2ctZXJyb3IgJHtTVFlMRV9ISURERU59XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5XCIgaWQ9XCJvdmVybGF5XCI+PC9kaXY+XG4gICAgICAgIDxmb3JtIGNsYXNzPVwiZm9ybS10aWNrZXQtZGVsZXRlIHJvdyBnLTNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgPGg1IGNsYXNzPVwiZm9ybS10aXRsZVwiPtCe0YjQuNCx0LrQsDwvaDU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxwPjwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cInN1Ym1pdFwiIGNsYXNzPVwic3VibWl0LWJ1dHRvbSBidG4gYnRuLXByaW1hcnkgbXMtMlwiPtCe0Jo8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgICBgO1xuICB9XG5cbiAgc3RhdGljIGdldCBmb3JtVGlja2V0RGVsZXRlSFRNTCgpIHtcbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cImRpYWxvZy1kZWxldGUgJHtTVFlMRV9ISURERU59XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5XCIgaWQ9XCJvdmVybGF5XCI+PC9kaXY+XG4gICAgICAgIDxmb3JtIGNsYXNzPVwiZm9ybS10aWNrZXQtZGVsZXRlIHJvdyBnLTNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgPGg1IGNsYXNzPVwiZm9ybS10aXRsZVwiPtCj0LTQsNC70LjRgtGMINGC0LjQutC10YI8L2g1PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8cD7QktGLINGD0LLQtdGA0LXQvdGLLCDRh9GC0L4g0YXQvtGC0LjRgtC1INGD0LTQsNC70LjRgtGMINGC0LjQutC10YI/INCt0YLQviDQtNC10LnRgdGC0LLQuNC1INC90LUg0L7QsdGA0LDRgtC40LzQvi48L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMiBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJjYW5jZWxcIiBjbGFzcz1cImNhbmNlbC1idXR0b24gYnRuIGJ0bi1zZWNvbmRhcnlcIj7QntGC0LzQtdC90LA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwic3VibWl0XCIgY2xhc3M9XCJzdWJtaXQtYnV0dG9tIGJ0biBidG4tcHJpbWFyeSBtcy0yXCI+0J7QmjwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGZvcm1UaWNrZXRIVE1MKCkge1xuICAgIHJldHVybiBgXG4gICAgPGRpdiBjbGFzcz1cImRpYWxvZy1hZGQtZWRpdCAke1NUWUxFX0hJRERFTn1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5XCIgaWQ9XCJvdmVybGF5XCI+PC9kaXY+XG4gICAgICA8Zm9ybSBjbGFzcz1cImZvcm0tdGlja2V0IHJvdyBnLTNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMiBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgIDxoNSBjbGFzcz1cImZvcm0tdGl0bGVcIj7QmNC30LzQtdC90LjRgtGMINGC0LjQutC10YI8L2g1PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dE5hbWVcIiBjbGFzcz1cImZvcm0tbGFiZWxcIj7QmtGA0LDRgtC60L7QtSDQvtC/0LjRgdCw0L3QuNC1PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHJlcXVpcmVkIGRhdGEtaWQ9XCIke0ZPUk1TLmlkSW5wdXROYW1lfVwiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dERlc2NyaXB0aW9uXCIgY2xhc3M9XCJmb3JtLWxhYmVsXCI+0J/QvtC00YDQvtCx0L3QvtC1INC+0L/QuNGB0LDQvdC40LU8L2xhYmVsPlxuICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cImZvcm0tY29udHJvbFwiIHJlcXVpcmVkIGRhdGEtaWQ9XCIke0ZPUk1TLmlkSW5wdXREZXNjcmlwdGlvbn1cIiB0eXBlPVwidGV4dFwiIHJvd3M9XCIzXCI+PC90ZXh0YXJlYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTIgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmRcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNhbmNlbFwiIGNsYXNzPVwiY2FuY2VsLWJ1dHRvbiBidG4gYnRuLXNlY29uZGFyeVwiPtCe0YLQvNC10L3QsDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwic3VibWl0XCIgY2xhc3M9XCJzdWJtaXQtYnV0dG9tIGJ0biBidG4tcHJpbWFyeSBtcy0yXCI+0J7QmjwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgc3RhdGljIGlkU2VsZWN0b3IoaWQpIHtcbiAgICByZXR1cm4gYFtkYXRhLWlkPVwiJHtpZH1cIl1gO1xuICB9XG5cbiAgc3RhdGljIGdldCBpdGVtQWRkU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcuaXRlbV9fYWRkJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXRlbVNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLnRhc2tzX19pdGVtJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgbGlzdEl0ZW1zU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcudGFza3NfX2xpc3QnO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWxJdGVtU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcuaXRlbV9fZGVsZXRlJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZWRpdEl0ZW1TZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5pdGVtX19lZGl0JztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgbG9hZGluZ1NlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLmZvcm0tcHJvY2Vzc2luZyc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlc2NyaXB0aW9uSXRlbVNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLml0ZW1fX2Rlc2NyaXB0aW9uJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgbmFtZUl0ZW1TZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5pdGVtX19uYW1lJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgc3RhdHVzSXRlbVNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLml0ZW1fX3N0YXR1cyc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGZvcm1UaWNrZXRTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5mb3JtLXRpY2tldCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGZvcm1UaWNrZXREZWxldGVTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5mb3JtLXRpY2tldC1kZWxldGUnO1xuICB9XG5cbiAgc3RhdGljIGdldCBmb3JtVGl0bGVTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5mb3JtLXRpdGxlJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGlhbG9nTG9hZGluZ1NlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLmRpYWxvZy1sb2FkaW5nJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGlhbG9nRXJyb3JTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5kaWFsb2ctZXJyb3InO1xuICB9XG5cbiAgc3RhdGljIGdldCBkaWFsb2dEZWxldGVTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5kaWFsb2ctZGVsZXRlJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGlhbG9nQWRkRWRpdFNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLmRpYWxvZy1hZGQtZWRpdCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNhbmNlbEJ1dHRvblNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLmNhbmNlbC1idXR0b24nO1xuICB9XG5cbiAgc3RhdGljIGdldCBzdWJtaXRCdXR0b25TZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy5zdWJtaXQtYnV0dG9uJztcbiAgfVxuXG4gIC8vINCg0LDQt9C80LXRgtC60LAgSFRNTCDQuCDQvtGC0YHQu9C10LbQuNCy0LDQvdC40LUg0YHQvtCx0YvRgtC40LlcbiAgYXN5bmMgYmluZFRvRE9NKCkge1xuICAgIC8vINCe0YLRgNC40YHQvtCy0LrQsCBIVE1MXG4gICAgdGhpcy5wYXJlbnRFbC5pbm5lckhUTUwgPSAnJztcbiAgICBpZiAoIXRoaXMudXJsU2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYXJlbnRFbC5pbm5lckhUTUwgKz0gSGVscERlc2tXaWRnZXQubG9hZGluZ0hUTUw7XG4gICAgdGhpcy5wYXJlbnRFbC5pbm5lckhUTUwgKz0gSGVscERlc2tXaWRnZXQuZm9ybUVycm9ySFRNTDtcbiAgICB0aGlzLnBhcmVudEVsLmlubmVySFRNTCArPSBIZWxwRGVza1dpZGdldC5mb3JtVGlja2V0SFRNTDtcbiAgICB0aGlzLnBhcmVudEVsLmlubmVySFRNTCArPSBIZWxwRGVza1dpZGdldC5mb3JtVGlja2V0RGVsZXRlSFRNTDtcblxuICAgIGNvbnN0IGZvcm1Qcm9jZXNzID0gdGhpcy5wYXJlbnRFbC5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmxvYWRpbmdTZWxlY3Rvcik7XG4gICAgY29uc3QgZm9ybUVycm9yID0gdGhpcy5wYXJlbnRFbC5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmRpYWxvZ0Vycm9yU2VsZWN0b3IpO1xuICAgIHRoaXMuWEhSID0gbmV3IFJlcXVlc3RTZW5kZXIodGhpcy51cmxTZXJ2ZXIsXG4gICAgICB7XG4gICAgICAgIGZvcm06IGZvcm1Qcm9jZXNzLFxuICAgICAgICBoaWRlOiBTVFlMRV9ISURERU4sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmb3JtOiBmb3JtRXJyb3IsXG4gICAgICAgIGhpZGU6IFNUWUxFX0hJRERFTixcbiAgICAgIH0pO1xuXG4gICAgdGhpcy50YXNrc0xpc3QuaXRlbXMgPSBhd2FpdCB0aGlzLlhIUi5nZXRBbGxUaWNrZXRzKCk7XG5cbiAgICB0aGlzLnBhcmVudEVsLmlubmVySFRNTCArPSBIZWxwRGVza1dpZGdldC50YXNrc0xpc3RIVE1MKHRoaXMudGFza3NMaXN0KTtcbiAgICB0aGlzLnRhc2tzTGlzdEl0ZW1zID0gdGhpcy5wYXJlbnRFbC5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0Lmxpc3RJdGVtc1NlbGVjdG9yKTtcblxuICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICB9XG5cbiAgaW5pdEV2ZW50cygpIHtcbiAgICAvLyDQntCx0YDQsNCx0L7RgtC60LAg0YHQvtCx0YvRgtC40Lkg0L/QviDQvdCw0LbQsNGC0LjRjiDQvdCwINC60L3QvtC/0LrRgyDQtNC+0LHQsNCy0LjRgtGMINCi0LjQutC10YJcbiAgICBjb25zdCBidXR0b25OZXdJdGVtID0gdGhpcy5wYXJlbnRFbC5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0Lml0ZW1BZGRTZWxlY3Rvcik7XG4gICAgdGhpcy5vbkNsaWNrTmV3SXRlbSA9IHRoaXMub25DbGlja05ld0l0ZW0uYmluZCh0aGlzKTtcbiAgICBidXR0b25OZXdJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrTmV3SXRlbSk7XG5cbiAgICAvLyDQntCx0YDQsNCx0L7RgtC60LAg0YHQvtCx0YvRgtC40Lkg0L3QsCDQutCw0LbQtNC+0Lkg0LfQsNC00LDRh9C1INC4INGB0L/QuNGB0LrQsFxuICAgIHRoaXMuaW5pdEl0ZW1zRXZlbnRzKCk7XG4gIH1cblxuICBpbml0SXRlbXNFdmVudHMoKSB7XG4gICAgLy8g0J7RgtGA0LDQsdC+0YLQutCwINGB0L7QsdGL0YLQuNC5INC90LAg0LrQsNC20LTQvtC5INC30LDQtNCw0YfQtSDQuNC3INGB0L/QuNGB0LrQsFxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy50YXNrc0xpc3RJdGVtcy5xdWVyeVNlbGVjdG9yQWxsKEhlbHBEZXNrV2lkZ2V0Lml0ZW1TZWxlY3Rvcik7XG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5pbml0SXRlbUV2ZW50cyhpdGVtKSk7XG4gIH1cblxuICBpbml0SXRlbUV2ZW50cyhpdGVtKSB7XG4gICAgY29uc3QgaWRJdGVtID0gaXRlbS5kYXRhc2V0LmlkO1xuXG4gICAgLy8g0KHQvtCx0YvRgtC40LUg0L/QviDQutC70LjQutGDINC30LDQtNCw0YfRg1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkaXZEZXNjcmlwdGlvbiA9IGl0ZW0ucXVlcnlTZWxlY3RvcihIZWxwRGVza1dpZGdldC5kZXNjcmlwdGlvbkl0ZW1TZWxlY3Rvcik7XG5cbiAgICAgIGlmICghZGl2RGVzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGl2RGVzY3JpcHRpb24uY2xhc3NMaXN0LmNvbnRhaW5zKFNUWUxFX0hJRERFTikpIHtcbiAgICAgICAgY29uc3QgcERlc2NyaXB0aW9uID0gZGl2RGVzY3JpcHRpb24ucXVlcnlTZWxlY3RvcigncCcpO1xuICAgICAgICBjb25zdCBpdGVtRGF0YSA9IGF3YWl0IHRoaXMuWEhSLmdldFRpY2tldChpZEl0ZW0pO1xuICAgICAgICBwRGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gaXRlbURhdGEgPyBpdGVtRGF0YS5kZXNjcmlwdGlvbiA6ICcnO1xuICAgICAgfVxuXG4gICAgICBkaXZEZXNjcmlwdGlvbi5jbGFzc0xpc3QudG9nZ2xlKFNUWUxFX0hJRERFTik7XG4gICAgfSk7XG5cbiAgICAvLyDQodC+0LHRi9GC0LjQtSDQuNC30LzQtdC90LXQvdC40Y8g0YHRgtCw0YLRg9GB0LAg0LfQsNC00LDRh9C4XG4gICAgY29uc3Qgc3RhdHVzSXRlbSA9IGl0ZW0ucXVlcnlTZWxlY3RvcihIZWxwRGVza1dpZGdldC5zdGF0dXNJdGVtU2VsZWN0b3IpO1xuICAgIHN0YXR1c0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZXZ0KSA9PiB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjb25zdCBib2R5ID0gYHN0YXR1cz0ke3N0YXR1c0l0ZW0uY2hlY2tlZH1gO1xuICAgICAgYXdhaXQgdGhpcy5YSFIuc2V0U3RhdHVzVGlja2V0KGlkSXRlbSwgYm9keSk7XG4gICAgfSk7XG5cbiAgICAvLyDQodC+0LHRi9GC0LjQtSDRg9C00LDQu9C10L3QuNGPINC30LDQtNCw0YfQuFxuICAgIGNvbnN0IGRlbGV0ZUl0ZW0gPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoSGVscERlc2tXaWRnZXQuZGVsSXRlbVNlbGVjdG9yKTtcbiAgICBkZWxldGVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLm9uQ2xpY2tEZWxldGVJdGVtKGlkSXRlbSk7XG4gICAgfSk7XG5cbiAgICAvLyDQodC+0LHRi9GC0LjQtSDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC30LDQtNCw0YfQuFxuICAgIGNvbnN0IGVkaXRJdGVtID0gaXRlbS5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmVkaXRJdGVtU2VsZWN0b3IpO1xuICAgIGVkaXRJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBpdGVtRGF0YSA9IGF3YWl0IHRoaXMuWEhSLmdldFRpY2tldChpZEl0ZW0pO1xuICAgICAgdGhpcy5vbkNsaWNrRWRpdEl0ZW0oaXRlbURhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgb25DbGlja05ld0l0ZW0oKSB7XG4gICAgY29uc3QgZGlhbG9nID0gdGhpcy5wYXJlbnRFbC5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmRpYWxvZ0FkZEVkaXRTZWxlY3Rvcik7XG4gICAgZGlhbG9nLmNsYXNzTGlzdC5yZW1vdmUoU1RZTEVfSElEREVOKTtcblxuICAgIC8vINCX0LDQs9C+0LvQvtCy0L7QuiDRhNC+0YDQvNGLXG4gICAgY29uc3QgdGl0bGVGb3JtID0gZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoSGVscERlc2tXaWRnZXQuZm9ybVRpdGxlU2VsZWN0b3IpO1xuICAgIHRpdGxlRm9ybS5pbm5lclRleHQgPSBGT1JNUy50aXRsZXMuYWRkO1xuXG4gICAgLy8g0JjQvNGPINGC0LjQutC10YLQsFxuICAgIGNvbnN0IGlucHV0TmFtZSA9IGRpYWxvZy5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmlkU2VsZWN0b3IoRk9STVMuaWRJbnB1dE5hbWUpKTtcbiAgICBpbnB1dE5hbWUudmFsdWUgPSAnJztcblxuICAgIC8vINCe0L/QuNGB0LDQvdC40LUg0YLQuNC60LXRgtCwXG4gICAgY29uc3QgaW5wdXREZXNjcmlwdGlvbiA9IGRpYWxvZy5xdWVyeVNlbGVjdG9yKFxuICAgICAgSGVscERlc2tXaWRnZXQuaWRTZWxlY3RvcihGT1JNUy5pZElucHV0RGVzY3JpcHRpb24pLFxuICAgICk7XG4gICAgaW5wdXREZXNjcmlwdGlvbi52YWx1ZSA9ICcnO1xuXG4gICAgLy8g0J7RgtGA0LDQsdC+0YLQutCwINC60L3QvtC/0LrQuCBcItCe0YLQvNC10L3QsFwiINC00LvRjyDQstGB0LXRhSDRhNC+0YDQvCDQutGA0L7QvNC1INGE0L7RgNC80Ysg0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvtGI0LjQsdC60LhcbiAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBkaWFsb2cucXVlcnlTZWxlY3RvcihIZWxwRGVza1dpZGdldC5jYW5jZWxCdXR0b25TZWxlY3Rvcik7XG4gICAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gZGlhbG9nLmNsYXNzTGlzdC5hZGQoU1RZTEVfSElEREVOKSk7XG5cbiAgICAvLyDQntGC0YDQsNCx0L7RgtC60LAg0L/QvtC00YLQstC10YDQttC00LXQvdC40Y8g0YTQvtGA0LzRi1xuICAgIGRpYWxvZy5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBhc3luYyAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc3QgYm9keSA9IGBuYW1lPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGlucHV0TmFtZS52YWx1ZSl9JmRlc2NyaXB0aW9uPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGlucHV0RGVzY3JpcHRpb24udmFsdWUpfWA7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLlhIUi5hZGRUaWNrZXQoYm9keSk7XG5cbiAgICAgIGRpYWxvZy5jbGFzc0xpc3QuYWRkKFNUWUxFX0hJRERFTik7XG5cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0LmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5hZGRJdGVtSFRNTChyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgb25DbGlja0VkaXRJdGVtKGl0ZW0pIHtcbiAgICBjb25zdCBkaWFsb2cgPSB0aGlzLnBhcmVudEVsLnF1ZXJ5U2VsZWN0b3IoSGVscERlc2tXaWRnZXQuZGlhbG9nQWRkRWRpdFNlbGVjdG9yKTtcbiAgICBkaWFsb2cuY2xhc3NMaXN0LnJlbW92ZShTVFlMRV9ISURERU4pO1xuXG4gICAgLy8g0JfQsNCz0L7Qu9C+0LLQvtC6INGE0L7RgNC80YtcbiAgICBjb25zdCB0aXRsZUZvcm0gPSBkaWFsb2cucXVlcnlTZWxlY3RvcihIZWxwRGVza1dpZGdldC5mb3JtVGl0bGVTZWxlY3Rvcik7XG4gICAgdGl0bGVGb3JtLmlubmVyVGV4dCA9IEZPUk1TLnRpdGxlcy5jaGFuZ2U7XG5cbiAgICAvLyDQmNC80Y8g0YLQuNC60LXRgtCwXG4gICAgY29uc3QgaW5wdXROYW1lID0gZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoSGVscERlc2tXaWRnZXQuaWRTZWxlY3RvcihGT1JNUy5pZElucHV0TmFtZSkpO1xuICAgIGlucHV0TmFtZS52YWx1ZSA9IGl0ZW0gPyBpdGVtLm5hbWUgOiAnJztcblxuICAgIC8vINCe0L/QuNGB0LDQvdC40LUg0YLQuNC60LXRgtCwXG4gICAgY29uc3QgaW5wdXREZXNjcmlwdGlvbiA9IGRpYWxvZy5xdWVyeVNlbGVjdG9yKFxuICAgICAgSGVscERlc2tXaWRnZXQuaWRTZWxlY3RvcihGT1JNUy5pZElucHV0RGVzY3JpcHRpb24pLFxuICAgICk7XG4gICAgaW5wdXREZXNjcmlwdGlvbi52YWx1ZSA9IGl0ZW0gPyBpdGVtLmRlc2NyaXB0aW9uIDogJyc7XG5cbiAgICAvLyDQntGC0YDQsNCx0L7RgtC60LAg0LrQvdC+0L/QutC4IFwi0J7RgtC80LXQvdCwXCIg0LTQu9GPINCy0YHQtdGFINGE0L7RgNC8INC60YDQvtC80LUg0YTQvtGA0LzRiyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0LrQuFxuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGRpYWxvZy5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmNhbmNlbEJ1dHRvblNlbGVjdG9yKTtcbiAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBkaWFsb2cuY2xhc3NMaXN0LmFkZChTVFlMRV9ISURERU4pKTtcblxuICAgIC8vINCe0YLRgNCw0LHQvtGC0LrQsCDQv9C+0LTRgtCy0LXRgNC20LTQtdC90LjRjyDRhNC+0YDQvNGLXG4gICAgZGlhbG9nLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGFzeW5jIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCBib2R5ID0gYG5hbWU9JHtpbnB1dE5hbWUudmFsdWV9JmRlc2NyaXB0aW9uPSR7aW5wdXREZXNjcmlwdGlvbi52YWx1ZX1gO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5YSFIuY2hhbmdlVGlja2V0KGl0ZW0uaWQsIGJvZHkpO1xuXG4gICAgICBkaWFsb2cuY2xhc3NMaXN0LmFkZChTVFlMRV9ISURERU4pO1xuXG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9PSBudWxsICYmIHJlc3VsdC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCfQmNC30LzQtdC90LXQvdC40LUg0LfQsNC00LDRh9C4IGlkPScsIHJlc3VsdC5pZCwgJyByZXN1bHQ9JywgcmVzdWx0KTtcbiAgICAgICAgdGhpcy5jaGFuZ2VJdGVtSFRNTChyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgb25DbGlja0RlbGV0ZUl0ZW0oaWQpIHtcbiAgICBjb25zdCBkaWFsb2cgPSB0aGlzLnBhcmVudEVsLnF1ZXJ5U2VsZWN0b3IoSGVscERlc2tXaWRnZXQuZGlhbG9nRGVsZXRlU2VsZWN0b3IpO1xuICAgIGRpYWxvZy5jbGFzc0xpc3QucmVtb3ZlKFNUWUxFX0hJRERFTik7XG5cbiAgICAvLyDQntGC0YDQsNCx0L7RgtC60LAg0LrQvdC+0L/QutC4IFwi0J7RgtC80LXQvdCwXCIg0LTQu9GPINCy0YHQtdGFINGE0L7RgNC8INC60YDQvtC80LUg0YTQvtGA0LzRiyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0LrQuFxuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGRpYWxvZy5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmNhbmNlbEJ1dHRvblNlbGVjdG9yKTtcbiAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBkaWFsb2cuY2xhc3NMaXN0LmFkZChTVFlMRV9ISURERU4pKTtcblxuICAgIC8vINCe0YLRgNCw0LHQvtGC0LrQsCDQv9C+0LTRgtCy0LXRgNC20LTQtdC90LjRjyDRhNC+0YDQvNGLXG4gICAgZGlhbG9nLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGFzeW5jIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLlhIUi5kZWxldGVUaWNrZXQoaWQpO1xuXG4gICAgICBkaWFsb2cuY2xhc3NMaXN0LmFkZChTVFlMRV9ISURERU4pO1xuXG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9PSBudWxsICYmIHJlc3VsdC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCfQo9C00LDQu9C10L3QuNC1INC30LDQtNCw0YfQuCBpZD0nLCByZXN1bHQuaWQsICcgcmVzdWx0PScsIHJlc3VsdCk7XG4gICAgICAgIHRoaXMuZGVsZXRlSXRlbUhUTUwocmVzdWx0LmlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZEl0ZW1IVE1MKGl0ZW0pIHtcbiAgICBjb25zdCBpdGVtSFRNTCA9IEhlbHBEZXNrV2lkZ2V0Lml0ZW1IVE1MKGl0ZW0pO1xuICAgIHRoaXMudGFza3NMaXN0SXRlbXMuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLCBpdGVtSFRNTCk7XG4gICAgY29uc3QgbGlJdGVtID0gdGhpcy50YXNrc0xpc3RJdGVtcy5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmlkU2VsZWN0b3IoaXRlbS5pZCkpO1xuICAgIHRoaXMuaW5pdEl0ZW1FdmVudHMobGlJdGVtKTtcbiAgfVxuXG4gIGRlbGV0ZUl0ZW1IVE1MKGlkKSB7XG4gICAgY29uc3QgbGlJdGVtID0gdGhpcy50YXNrc0xpc3RJdGVtcy5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmlkU2VsZWN0b3IoaWQpKTtcbiAgICBsaUl0ZW0ucmVtb3ZlKCk7XG4gIH1cblxuICBjaGFuZ2VJdGVtSFRNTChpdGVtKSB7XG4gICAgY29uc3QgbGlJdGVtID0gdGhpcy50YXNrc0xpc3RJdGVtcy5xdWVyeVNlbGVjdG9yKEhlbHBEZXNrV2lkZ2V0LmlkU2VsZWN0b3IoaXRlbS5pZCkpO1xuICAgIGNvbnN0IGl0ZW1OYW1lID0gbGlJdGVtLnF1ZXJ5U2VsZWN0b3IoSGVscERlc2tXaWRnZXQubmFtZUl0ZW1TZWxlY3Rvcik7XG4gICAgaXRlbU5hbWUuaW5uZXJUZXh0ID0gaXRlbS5uYW1lO1xuICB9XG59XG4iLCJpbXBvcnQgSGVscERlc2tXaWRnZXQgZnJvbSAnLi4vd2lkZ2V0cy9oZWxwZGVzay9oZWxwZGVzayc7XG5cbi8vINCQ0LTRgNC10YEg0YHQtdGA0LLQtdGA0LBcbmNvbnN0IFVSTF9TRVJWRVIgPSAnaHR0cDovL2xvY2FsaG9zdDo3MDcwJztcblxuLy8gVGlja2V0IHtcbi8vICAgaWQgLy8g0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAgKNGD0L3QuNC60LDQu9GM0L3Ri9C5INCyINC/0YDQtdC00LXQu9Cw0YUg0YHQuNGB0YLQtdC80YspXG4vLyAgIG5hbWUgLy8g0LrRgNCw0YLQutC+0LUg0L7Qv9C40YHQsNC90LjQtVxuLy8gICBzdGF0dXMgLy8gYm9vbGVhbiAtINGB0LTQtdC70LDQvdC+INC40LvQuCDQvdC10YJcbi8vICAgY3JlYXRlZCAvLyDQtNCw0YLQsCDRgdC+0LfQtNCw0L3QuNGPICh0aW1lc3RhbXApXG4vLyB9XG5cbi8vIFRpY2tldEZ1bGwge1xuLy8gICBpZCAvLyDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCAo0YPQvdC40LrQsNC70YzQvdGL0Lkg0LIg0L/RgNC10LTQtdC70LDRhSDRgdC40YHRgtC10LzRiylcbi8vICAgbmFtZSAvLyDQutGA0LDRgtC60L7QtSDQvtC/0LjRgdCw0L3QuNC1XG4vLyAgIGRlc2NyaXB0aW9uIC8vINC/0L7Qu9C90L7QtSDQvtC/0LjRgdCw0L3QuNC1XG4vLyAgIHN0YXR1cyAvLyBib29sZWFuIC0g0YHQtNC10LvQsNC90L4g0LjQu9C4INC90LXRglxuLy8gICBjcmVhdGVkIC8vINC00LDRgtCwINGB0L7Qt9C00LDQvdC40Y8gKHRpbWVzdGFtcClcbi8vIH1cblxuY29uc3QgaGVscERlc2tXaWRnZXQgPSBuZXcgSGVscERlc2tXaWRnZXQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3dpZGdldC1jb250YWluZXInKSwgVVJMX1NFUlZFUik7XG5oZWxwRGVza1dpZGdldC5iaW5kVG9ET00oKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLypcbiAgZXNsaW50LWRpc2FibGVcbiAgbm8tY29uc29sZSxcbiAgZnVuYy1uYW1lc1xuKi9cbnZhciBub3JtYWxpemVVcmwgPSByZXF1aXJlKCcuL25vcm1hbGl6ZS11cmwnKTtcblxudmFyIHNyY0J5TW9kdWxlSWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudmFyIG5vRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnO1xudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIHRpbWUpIHtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZnVuY3Rpb25DYWxsID0gZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb25DYWxsLCB0aW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpIHtcbiAgdmFyIHNyYyA9IHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdO1xuXG4gIGlmICghc3JjKSB7XG4gICAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICAgIHNyYyA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgICAgIHZhciBsYXN0U2NyaXB0VGFnID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAobGFzdFNjcmlwdFRhZykge1xuICAgICAgICBzcmMgPSBsYXN0U2NyaXB0VGFnLnNyYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXSA9IHNyYztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZmlsZU1hcCkge1xuICAgIGlmICghc3JjKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc3BsaXRSZXN1bHQgPSBzcmMuc3BsaXQoLyhbXlxcXFwvXSspXFwuanMkLyk7XG4gICAgdmFyIGZpbGVuYW1lID0gc3BsaXRSZXN1bHQgJiYgc3BsaXRSZXN1bHRbMV07XG5cbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKCcuanMnLCAnLmNzcycpXTtcbiAgICB9XG5cbiAgICBpZiAoIWZpbGVNYXApIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoJy5qcycsICcuY3NzJyldO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlTWFwLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChtYXBSdWxlKSB7XG4gICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChmaWxlbmFtZSwgXCJcXFxcLmpzJFwiKSwgJ2cnKTtcbiAgICAgIHJldHVybiBub3JtYWxpemVVcmwoc3JjLnJlcGxhY2UocmVnLCBcIlwiLmNvbmNhdChtYXBSdWxlLnJlcGxhY2UoL3tmaWxlTmFtZX0vZywgZmlsZW5hbWUpLCBcIi5jc3NcIikpKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ3NzKGVsLCB1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5cbiAgICB1cmwgPSBlbC5ocmVmLnNwbGl0KCc/JylbMF07XG4gIH1cblxuICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVsLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgIC8vIFdlIHNlZW0gdG8gYmUgYWJvdXQgdG8gcmVwbGFjZSBhIGNzcyBsaW5rIHRoYXQgaGFzbid0IGxvYWRlZCB5ZXQuXG4gICAgLy8gV2UncmUgcHJvYmFibHkgY2hhbmdpbmcgdGhlIHNhbWUgZmlsZSBtb3JlIHRoYW4gb25jZS5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXVybCB8fCAhKHVybC5pbmRleE9mKCcuY3NzJykgPiAtMSkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICBlbC52aXNpdGVkID0gdHJ1ZTtcbiAgdmFyIG5ld0VsID0gZWwuY2xvbmVOb2RlKCk7XG4gIG5ld0VsLmlzTG9hZGVkID0gZmFsc2U7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuaHJlZiA9IFwiXCIuY29uY2F0KHVybCwgXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtcblxuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgZWwubmV4dFNpYmxpbmcpO1xuICB9IGVsc2Uge1xuICAgIGVsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3RWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbG9hZFVybChocmVmLCBzcmMpIHtcbiAgdmFyIHJldDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cbiAgaHJlZiA9IG5vcm1hbGl6ZVVybChocmVmLCB7XG4gICAgc3RyaXBXV1c6IGZhbHNlXG4gIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyYXktY2FsbGJhY2stcmV0dXJuXG5cbiAgc3JjLnNvbWUoZnVuY3Rpb24gKHVybCkge1xuICAgIGlmIChocmVmLmluZGV4T2Yoc3JjKSA+IC0xKSB7XG4gICAgICByZXQgPSB1cmw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkU3R5bGUoc3JjKSB7XG4gIGlmICghc3JjKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpO1xuICB2YXIgbG9hZGVkID0gZmFsc2U7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHVybCA9IGdldFJlbG9hZFVybChlbC5ocmVmLCBzcmMpO1xuXG4gICAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHVybCkge1xuICAgICAgdXBkYXRlQ3NzKGVsLCB1cmwpO1xuICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbG9hZGVkO1xufVxuXG5mdW5jdGlvbiByZWxvYWRBbGwoKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVwZGF0ZUNzcyhlbCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc1VybFJlcXVlc3QodXJsKSB7XG4gIC8vIEFuIFVSTCBpcyBub3QgYW4gcmVxdWVzdCBpZlxuICAvLyBJdCBpcyBub3QgaHR0cCBvciBodHRwc1xuICBpZiAoIS9eaHR0cHM/Oi9pLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgb3B0aW9ucykge1xuICBpZiAobm9Eb2N1bWVudCkge1xuICAgIGNvbnNvbGUubG9nKCdubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1MnKTtcbiAgICByZXR1cm4gbm9vcDtcbiAgfVxuXG4gIHZhciBnZXRTY3JpcHRTcmMgPSBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKTtcblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHNyYyA9IGdldFNjcmlwdFNyYyhvcHRpb25zLmZpbGVuYW1lKTtcbiAgICB2YXIgcmVsb2FkZWQgPSByZWxvYWRTdHlsZShzcmMpO1xuXG4gICAgaWYgKG9wdGlvbnMubG9jYWxzKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzJyk7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVsb2FkZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBjc3MgcmVsb2FkICVzJywgc3JjLmpvaW4oJyAnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlYm91bmNlKHVwZGF0ZSwgNTApO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVybChwYXRoQ29tcG9uZW50cykge1xuICByZXR1cm4gcGF0aENvbXBvbmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgaXRlbSkge1xuICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgY2FzZSAnLi4nOlxuICAgICAgICBhY2N1bXVsYXRvci5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJy4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIFtdKS5qb2luKCcvJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybFN0cmluZykge1xuICB1cmxTdHJpbmcgPSB1cmxTdHJpbmcudHJpbSgpO1xuXG4gIGlmICgvXmRhdGE6L2kudGVzdCh1cmxTdHJpbmcpKSB7XG4gICAgcmV0dXJuIHVybFN0cmluZztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHVybFN0cmluZy5pbmRleE9mKCcvLycpICE9PSAtMSA/IHVybFN0cmluZy5zcGxpdCgnLy8nKVswXSArICcvLycgOiAnJztcbiAgdmFyIGNvbXBvbmVudHMgPSB1cmxTdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKHByb3RvY29sLCAnaScpLCAnJykuc3BsaXQoJy8nKTtcbiAgdmFyIGhvc3QgPSBjb21wb25lbnRzWzBdLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFwuJC8sICcnKTtcbiAgY29tcG9uZW50c1swXSA9ICcnO1xuICB2YXIgcGF0aCA9IG5vcm1hbGl6ZVVybChjb21wb25lbnRzKTtcbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGg7XG59OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE2NzMzNjE3MzkyNDBcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiL2hvbWUvYXBwdmV5b3IvcHJvamVjdHMvYWhqcy1odHRwLWZyb250ZW5kL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE2NzMzNjE3Mzc1NjFcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiL2hvbWUvYXBwdmV5b3IvcHJvamVjdHMvYWhqcy1odHRwLWZyb250ZW5kL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE2NzMzNjE3Mzc2NThcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiL2hvbWUvYXBwdmV5b3IvcHJvamVjdHMvYWhqcy1odHRwLWZyb250ZW5kL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dHJ5IHtcblx0XHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdFx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRcdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG1vZHVsZS5lcnJvciA9IGU7XG5cdFx0dGhyb3cgZTtcblx0fVxuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uaHUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIFwibWFpblwiICsgXCIuY3NzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+IChcIm1haW4uXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIxNDI4OTEyZDQzZjY2OWFiN2JmNVwiKSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBjdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xudmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7XG5cbi8vIG1vZHVsZSBhbmQgcmVxdWlyZSBjcmVhdGlvblxudmFyIGN1cnJlbnRDaGlsZE1vZHVsZTtcbnZhciBjdXJyZW50UGFyZW50cyA9IFtdO1xuXG4vLyBzdGF0dXNcbnZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTtcbnZhciBjdXJyZW50U3RhdHVzID0gXCJpZGxlXCI7XG5cbi8vIHdoaWxlIGRvd25sb2FkaW5nXG52YXIgYmxvY2tpbmdQcm9taXNlcyA9IDA7XG52YXIgYmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTtcblxuLy8gVGhlIHVwZGF0ZSBpbmZvXG52YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7XG52YXIgcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkKSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgX21haW4gPSBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkO1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9hY2NlcHRlZEVycm9ySGFuZGxlcnM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IF9tYWluLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBfbWFpbiA/IHVuZGVmaW5lZCA6IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaywgZXJyb3JIYW5kbGVyKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcFtpXV0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBdID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVjbGluZTogZnVuY3Rpb24gKGRlcCkge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcblx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcblx0XHR9LFxuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJpZGxlXCI6XG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuXHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcblx0XHRcdFx0XHQocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIHx8IFtdKS5wdXNoKFxuXHRcdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlbWVudCBBUElcblx0XHRjaGVjazogaG90Q2hlY2ssXG5cdFx0YXBwbHk6IGhvdEFwcGx5LFxuXHRcdHN0YXR1czogZnVuY3Rpb24gKGwpIHtcblx0XHRcdGlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHR2YXIgaWR4ID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG5cdFx0XHRpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXG5cdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG5cdFx0ZGF0YTogY3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG5cdH07XG5cdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGhvdDtcbn1cblxuZnVuY3Rpb24gc2V0U3RhdHVzKG5ld1N0YXR1cykge1xuXHRjdXJyZW50U3RhdHVzID0gbmV3U3RhdHVzO1xuXHR2YXIgcmVzdWx0cyA9IFtdO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlc3VsdHNbaV0gPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChyZXN1bHRzKTtcbn1cblxuZnVuY3Rpb24gdW5ibG9jaygpIHtcblx0aWYgKC0tYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkge1xuXHRcdHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRcdFx0dmFyIGxpc3QgPSBibG9ja2luZ1Byb21pc2VzV2FpdGluZztcblx0XHRcdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0bGlzdFtpXSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJhY2tCbG9ja2luZ1Byb21pc2UocHJvbWlzZSkge1xuXHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cdFx0LyogZmFsbHRocm91Z2ggKi9cblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcysrO1xuXHRcdFx0cHJvbWlzZS50aGVuKHVuYmxvY2ssIHVuYmxvY2spO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSByZXR1cm4gZm4oKTtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcucHVzaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXNvbHZlKGZuKCkpO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRyZXR1cm4gc2V0U3RhdHVzKFwiY2hlY2tcIilcblx0XHQudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpLnRoZW4oXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicHJlcGFyZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1yQykucmVkdWNlKGZ1bmN0aW9uIChcblx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0a2V5XG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5yLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiBwcm9taXNlcztcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtdKVxuXHRcdFx0XHQpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShhcHBseU9uVXBkYXRlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJyZWFkeVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xufVxuXG5mdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcInJlYWR5XCIpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzIChzdGF0ZTogXCIgK1xuXHRcdFx0XHRcdGN1cnJlbnRTdGF0dXMgK1xuXHRcdFx0XHRcdFwiKVwiXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0YXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKTtcblxuXHR2YXIgcmVzdWx0cyA9IGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLm1hcChmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdHJldHVybiBoYW5kbGVyKG9wdGlvbnMpO1xuXHR9KTtcblx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSB1bmRlZmluZWQ7XG5cblx0dmFyIGVycm9ycyA9IHJlc3VsdHNcblx0XHQubWFwKGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRyZXR1cm4gci5lcnJvcjtcblx0XHR9KVxuXHRcdC5maWx0ZXIoQm9vbGVhbik7XG5cblx0aWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImFib3J0XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3JzWzBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG5cdHZhciBkaXNwb3NlUHJvbWlzZSA9IHNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG5cblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmRpc3Bvc2UpIHJlc3VsdC5kaXNwb3NlKCk7XG5cdH0pO1xuXG5cdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2Vcblx0dmFyIGFwcGx5UHJvbWlzZSA9IHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKFtkaXNwb3NlUHJvbWlzZSwgYXBwbHlQcm9taXNlXSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJmYWlsXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGxpc3QpIHtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIGxpc3Q7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiaWRsZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHtcblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdGlmICghY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMpIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gdW5kZWZpbmVkO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCB8fCB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkge1xuXHRjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0ID0gdXBkYXRlZE1vZHVsZXNMaXN0O1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7XG5cdFx0Ly8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmdcblx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5odShjaHVua0lkKTtcblx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZWFqc19odHRwX2Zyb250ZW5kXCJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHRpZihjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0KSBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpO1xuXHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0oKTtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdH1cbn07XG5cbnZhciBjdXJyZW50VXBkYXRlQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGU7XG52YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZVJ1bnRpbWU7XG5mdW5jdGlvbiBhcHBseUhhbmRsZXIob3B0aW9ucykge1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHModXBkYXRlTW9kdWxlSWQpIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFpbjogW2lkXSxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG5cdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG5cdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG5cdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdGlmIChcblx0XHRcdFx0IW1vZHVsZSB8fFxuXHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcblx0XHRcdFx0dmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18uY1twYXJlbnRJZF07XG5cdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcblx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuXHRcdFx0XHRxdWV1ZS5wdXNoKHtcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuXHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG5cdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuXHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuXHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG5cdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cblx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZShtb2R1bGUpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIG1vZHVsZS5pZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuXHRcdCk7XG5cdH07XG5cblx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gY3VycmVudFVwZGF0ZSkge1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0XHR2YXIgbmV3TW9kdWxlRmFjdG9yeSA9IGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdO1xuXHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuXHRcdFx0dmFyIHJlc3VsdDtcblx0XHRcdGlmIChuZXdNb2R1bGVGYWN0b3J5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSB7XG5cdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRpZiAoXG5cdFx0XHRtb2R1bGUgJiZcblx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgfHwgbW9kdWxlLmhvdC5fbWFpbikgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBtb2R1bGUuaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0dmFyIGFjY2VwdENhbGxiYWNrID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlciA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnMucHVzaChlcnJvckhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBlcnJvckhhbmRsZXJzW2tdID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnNba10oZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba11cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgbyA9IDA7IG8gPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBvKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbb107XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGl0ZW0ucmVxdWlyZShtb2R1bGVJZCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHQhY3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXVxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzM2KTtcbiJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsIlNFUlZFUl9FUlJPUiIsIlJlcXVlc3RTZW5kZXIiLCJjb25zdHJ1Y3RvciIsInVybFNlcnZlciIsImZvcm1Qcm9jZXNzIiwiZm9ybUVycm9yIiwidGhpcyIsInVybCIsImdldEFzeW5jIiwibWV0aG9kIiwicXVlcnkiLCJib2R5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXF1ZXN0VGV4dCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwic2VuZCIsImFzeW5jIiwidW5kZWZpbmVkIiwiZm9ybSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImhpZGUiLCJyZXN1bHQiLCJhZGQiLCJyZXNwb25zZUFuc3dlciIsImEiLCJyQW5zd2VyIiwic3RhdHVzIiwic2hvd0Vycm9yIiwicmVzcG9uc2VUZXh0IiwiSlNPTiIsInBhcnNlIiwiZSIsIm1zZyIsImNvbnNvbGUiLCJlcnJvciIsInAiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJUZXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInByZXZlbnREZWZhdWx0Iiwic2VuZFJlcXVlc3QiLCJBcnJheSIsImlkIiwibGVuZ3RoIiwiU1RZTEVfSElEREVOIiwiRk9STVMiLCJIZWxwRGVza1dpZGdldCIsInBhcmVudEVsIiwidGl0bGUiLCJ0YXNrc0xpc3QiLCJpdGVtcyIsInN0YXRpYyIsIml0ZW0iLCJuYW1lIiwiY3JlYXRlZCIsImh0bWwiLCJmb3JFYWNoIiwiaXRlbUhUTUwiLCJpdGVtc0hUTUwiLCJsb2FkaW5nSFRNTCIsImZvcm1FcnJvckhUTUwiLCJmb3JtVGlja2V0RGVsZXRlSFRNTCIsImZvcm1UaWNrZXRIVE1MIiwiaXRlbUFkZFNlbGVjdG9yIiwiaXRlbVNlbGVjdG9yIiwibGlzdEl0ZW1zU2VsZWN0b3IiLCJkZWxJdGVtU2VsZWN0b3IiLCJlZGl0SXRlbVNlbGVjdG9yIiwibG9hZGluZ1NlbGVjdG9yIiwiZGVzY3JpcHRpb25JdGVtU2VsZWN0b3IiLCJuYW1lSXRlbVNlbGVjdG9yIiwic3RhdHVzSXRlbVNlbGVjdG9yIiwiZm9ybVRpY2tldFNlbGVjdG9yIiwiZm9ybVRpY2tldERlbGV0ZVNlbGVjdG9yIiwiZm9ybVRpdGxlU2VsZWN0b3IiLCJkaWFsb2dMb2FkaW5nU2VsZWN0b3IiLCJkaWFsb2dFcnJvclNlbGVjdG9yIiwiZGlhbG9nRGVsZXRlU2VsZWN0b3IiLCJkaWFsb2dBZGRFZGl0U2VsZWN0b3IiLCJjYW5jZWxCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiWEhSIiwiZ2V0QWxsVGlja2V0cyIsInRhc2tzTGlzdEhUTUwiLCJ0YXNrc0xpc3RJdGVtcyIsImluaXRFdmVudHMiLCJidXR0b25OZXdJdGVtIiwib25DbGlja05ld0l0ZW0iLCJiaW5kIiwiaW5pdEl0ZW1zRXZlbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImluaXRJdGVtRXZlbnRzIiwiaWRJdGVtIiwiZGF0YXNldCIsImRpdkRlc2NyaXB0aW9uIiwiY29udGFpbnMiLCJwRGVzY3JpcHRpb24iLCJpdGVtRGF0YSIsImdldFRpY2tldCIsImRlc2NyaXB0aW9uIiwidG9nZ2xlIiwic3RhdHVzSXRlbSIsInN0b3BQcm9wYWdhdGlvbiIsImNoZWNrZWQiLCJzZXRTdGF0dXNUaWNrZXQiLCJvbkNsaWNrRGVsZXRlSXRlbSIsIm9uQ2xpY2tFZGl0SXRlbSIsImRpYWxvZyIsImlucHV0TmFtZSIsImlkU2VsZWN0b3IiLCJ2YWx1ZSIsImlucHV0RGVzY3JpcHRpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJhZGRUaWNrZXQiLCJPYmplY3QiLCJhZGRJdGVtSFRNTCIsImNoYW5nZVRpY2tldCIsImNoYW5nZUl0ZW1IVE1MIiwiZGVsZXRlVGlja2V0IiwiZGVsZXRlSXRlbUhUTUwiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJsaUl0ZW0iLCJkb2N1bWVudCIsImJpbmRUb0RPTSIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJjcmVhdGUiLCJub0RvY3VtZW50IiwicHJvdG90eXBlIiwibm9vcCIsInVwZGF0ZUNzcyIsImVsIiwiaHJlZiIsInNwbGl0IiwiaXNVcmxSZXF1ZXN0IiwiaXNMb2FkZWQiLCJpbmRleE9mIiwidmlzaXRlZCIsIm5ld0VsIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY29uY2F0IiwiRGF0ZSIsIm5vdyIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJyZWxvYWRBbGwiLCJlbGVtZW50cyIsImNhbGwiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZUlkIiwib3B0aW9ucyIsImxvZyIsImZuIiwidGltZW91dCIsImdldFNjcmlwdFNyYyIsInNyYyIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsYXN0U2NyaXB0VGFnIiwiZmlsZU1hcCIsInNwbGl0UmVzdWx0IiwiZmlsZW5hbWUiLCJtYXAiLCJtYXBSdWxlIiwicmVnIiwiUmVnRXhwIiwicmVwbGFjZSIsImdldEN1cnJlbnRTY3JpcHRVcmwiLCJyZWxvYWRlZCIsImxvYWRlZCIsInJldCIsInN0cmlwV1dXIiwic29tZSIsImdldFJlbG9hZFVybCIsInJlbG9hZFN0eWxlIiwibG9jYWxzIiwiam9pbiIsInNlbGYiLCJhcmdzIiwiYXJndW1lbnRzIiwiZnVuY3Rpb25DYWxsIiwiYXBwbHkiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidXJsU3RyaW5nIiwidHJpbSIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJ0b0xvd2VyQ2FzZSIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwicG9wIiwicHVzaCIsImNzc1JlbG9hZCIsImhvdCIsImRpc3Bvc2UiLCJhY2NlcHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiY2FjaGVkTW9kdWxlIiwiZXhlY09wdGlvbnMiLCJmYWN0b3J5IiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInJlcXVpcmUiLCJpIiwiaGFuZGxlciIsIm0iLCJjIiwiaHUiLCJjaHVua0lkIiwiaCIsIm1pbmlDc3NGIiwiaG1yRiIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJvIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwibCIsImRvbmUiLCJrZXkiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwicyIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50IiwiZG9uZUZucyIsInR5cGUiLCJ0YXJnZXQiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJibG9ja2luZ1Byb21pc2VzIiwiYmxvY2tpbmdQcm9taXNlc1dhaXRpbmciLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJyZXN1bHRzIiwiYWxsIiwidW5ibG9jayIsInRoZW4iLCJsaXN0IiwiaG90Q2hlY2siLCJhcHBseU9uVXBkYXRlIiwiRXJyb3IiLCJobXJNIiwidXBkYXRlIiwidXBkYXRlZE1vZHVsZXMiLCJrZXlzIiwiaG1yQyIsInByb21pc2VzIiwiciIsImludGVybmFsQXBwbHkiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsImhvdEFwcGx5IiwiZXJyb3JzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImRpc3Bvc2VQcm9taXNlIiwiYXBwbHlQcm9taXNlIiwicmVwb3J0RXJyb3IiLCJlcnIiLCJvdXRkYXRlZE1vZHVsZXMiLCJtb2R1bGVzIiwiaG1ySSIsImhtckQiLCJtZSIsIl9tYWluIiwicmVxdWVzdCIsImFjdGl2ZSIsInBhcmVudHMiLCJjaGlsZHJlbiIsIndhcm4iLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2FjY2VwdGVkRXJyb3JIYW5kbGVycyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfcmVxdWlyZVNlbGYiLCJzbGljZSIsImRlcCIsImNhbGxiYWNrIiwiZXJyb3JIYW5kbGVyIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJpbnZhbGlkYXRlIiwiY2hlY2siLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImRhdGEiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJmdWxsaHJlZiIsInJlamVjdCIsImxpbmtUYWciLCJyZWwiLCJlcnJvclR5cGUiLCJyZWFsSHJlZiIsImNvZGUiLCJleGlzdGluZ0xpbmtUYWdzIiwiZGF0YUhyZWYiLCJ0YWciLCJleGlzdGluZ1N0eWxlVGFncyIsIm9sZFRhZyIsIm1pbmlDc3MiLCJjaHVua0lkcyIsInJlbW92ZWRDaHVua3MiLCJyZW1vdmVkTW9kdWxlcyIsImFwcGx5SGFuZGxlcnMiLCJ1cGRhdGVkTW9kdWxlc0xpc3QiLCJhcyIsImN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCJobXJTX2pzb25wIiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJiIiwiZiIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiaiIsIm91dGRhdGVkTW9kdWxlSWQiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJjYWxsYmFja3MiLCJlcnJvckhhbmRsZXJzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJrIiwiZGVwZW5kZW5jeUlkIiwiZXJyMiIsIm9uRXJyb3JlZCIsIm9yaWdpbmFsRXJyb3IiLCJpZ25vcmVFcnJvcmVkIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXNUZXh0IiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=